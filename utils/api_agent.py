import openai
import backoff
import time
import requests
import json
from openai import OpenAI
from openai._exceptions import RateLimitError, APIError, APIConnectionError
from .LLM_utils import OutOfQuotaException, AccessTerminatedException
from .LLM_utils import num_tokens_from_string, model2max_context

with open ('utils/model.json','r') as f:
    config = json.load(f)
    support_models = config["support_models"]

class Api_Agent:
    def __init__(self, model_name: str, name: str, api_key: str, temperature: float, sleep_time: float=0, backend: str="siliconflow") -> None:
        """Create an agent

        Args:
            model_name(str): model name
            name (str): name of this agent
            temperature (float): higher values make the output more random, while lower values make it more focused and deterministic
            sleep_time (float): sleep because of rate limits
        """
        self.model_name = model_name
        self.name = name
        self.api_key=api_key
        self.temperature = temperature
        self.memory_lst = []
        self.sleep_time = sleep_time
        self.backend = backend

    @backoff.on_exception(backoff.expo, (RateLimitError, APIError, APIConnectionError), max_tries=20)
    def query(self, messages: "list[dict]", max_tokens: int, temperature: float) -> str:
        """make a query

        Args:
            messages (list[dict]): chat history in turbo format
            max_tokens (int): max token in api call
            api_key (str): openai api key
            temperature (float): sampling temperature

        Raises:
            OutOfQuotaException: the apikey has out of quota
            AccessTerminatedException: the apikey has been ban

        Returns:
            str: the return msg
        """
        time.sleep(self.sleep_time)
        assert self.model_name in support_models, f"Not support {self.model_name}. Choices: {support_models}"


        if self.backend == "openai":
            try:
                response = openai.ChatCompletion.create(
                    model=self.model_name,
                    messages=messages,
                    temperature=temperature,
                    max_tokens=max_tokens,
                    api_key=self.api_key
                )
                return response["choices"][0]["message"]["content"]

            except RateLimitError as e:
                if "You exceeded your current quota, please check your plan and billing details" in e.user_message:
                    raise OutOfQuotaException(self.api_key)
                elif "Your access was terminated due to violation of our policies" in e.user_message:
                    raise AccessTerminatedException(self.api_key)
                else:
                    raise e
        

        elif self.backend == "siliconflow":
            url = "https://api.siliconflow.cn/v1/chat/completions"
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": self.model_name,
                "messages": messages,
                "temperature": temperature,
                "max_tokens": max_tokens
            }

            response = requests.post(url, headers=headers, json=payload)
            if response.status_code != 200:
                raise Exception(f"SiliconFlow API Error {response.status_code}: {response.text}")
            return response.json()["choices"][0]["message"]["content"]

        else:
            raise ValueError(f"Unsupported backend: {self.backend}")

    def set_meta_prompt(self, meta_prompt: str):
        """Set the meta_prompt

        Args:
            meta_prompt (str): the meta prompt
        """
        self.memory_lst.append({"role": "system", "content": f"{meta_prompt}"})

    def add_event(self, event: str):
        """Add an new event in the memory

        Args:
            event (str): string that describe the event.
        """
        self.memory_lst.append({"role": "user", "content": f"{event}"})

    def add_memory(self, memory: str):
        """Monologue in the memory

        Args:
            memory (str): string that generated by the model in the last round.
        """
        self.memory_lst.append({"role": "assistant", "content": f"{memory}"})
        print(f"----- {self.name} -----\n{memory}\n")

    def ask(self, temperature: float=None):
        """Query for answer

        Args:
        """
        # query
        num_context_token = sum([num_tokens_from_string(m["content"], self.model_name) for m in self.memory_lst])
        max_token = model2max_context[self.model_name] - num_context_token
        return self.query(self.memory_lst, max_token, temperature=temperature if temperature else self.temperature)